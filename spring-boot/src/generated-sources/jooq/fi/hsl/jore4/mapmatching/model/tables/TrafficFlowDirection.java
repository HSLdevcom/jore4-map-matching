/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore4.mapmatching.model.tables;


import fi.hsl.jore4.mapmatching.model.Keys;
import fi.hsl.jore4.mapmatching.model.Routing;
import fi.hsl.jore4.mapmatching.model.tables.records.TrafficFlowDirectionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The possible directions of traffic flow on infrastructure links. Using 
 * code values from Digiroad codeset.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TrafficFlowDirection extends TableImpl<TrafficFlowDirectionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>routing.traffic_flow_direction</code>
     */
    public static final TrafficFlowDirection TRAFFIC_FLOW_DIRECTION = new TrafficFlowDirection();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrafficFlowDirectionRecord> getRecordType() {
        return TrafficFlowDirectionRecord.class;
    }

    /**
     * The column <code>routing.traffic_flow_direction.traffic_flow_direction_type</code>. Numeric enum value for direction of traffic flow. The code value originates from Digiroad codeset.
     */
    public final TableField<TrafficFlowDirectionRecord, Integer> TRAFFIC_FLOW_DIRECTION_TYPE = createField(DSL.name("traffic_flow_direction_type"), SQLDataType.INTEGER.nullable(false), this, "Numeric enum value for direction of traffic flow. The code value originates from Digiroad codeset.");

    /**
     * The column <code>routing.traffic_flow_direction.traffic_flow_direction_name</code>. The short name for direction of traffic flow. The text value originates from the JORE4 database schema.
     */
    public final TableField<TrafficFlowDirectionRecord, String> TRAFFIC_FLOW_DIRECTION_NAME = createField(DSL.name("traffic_flow_direction_name"), SQLDataType.CLOB.nullable(false), this, "The short name for direction of traffic flow. The text value originates from the JORE4 database schema.");

    /**
     * The column <code>routing.traffic_flow_direction.description</code>.
     */
    public final TableField<TrafficFlowDirectionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    private TrafficFlowDirection(Name alias, Table<TrafficFlowDirectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrafficFlowDirection(Name alias, Table<TrafficFlowDirectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The possible directions of traffic flow on infrastructure links. Using code values from Digiroad codeset."), TableOptions.table());
    }

    /**
     * Create an aliased <code>routing.traffic_flow_direction</code> table reference
     */
    public TrafficFlowDirection(String alias) {
        this(DSL.name(alias), TRAFFIC_FLOW_DIRECTION);
    }

    /**
     * Create an aliased <code>routing.traffic_flow_direction</code> table reference
     */
    public TrafficFlowDirection(Name alias) {
        this(alias, TRAFFIC_FLOW_DIRECTION);
    }

    /**
     * Create a <code>routing.traffic_flow_direction</code> table reference
     */
    public TrafficFlowDirection() {
        this(DSL.name("traffic_flow_direction"), null);
    }

    public <O extends Record> TrafficFlowDirection(Table<O> child, ForeignKey<O, TrafficFlowDirectionRecord> key) {
        super(child, key, TRAFFIC_FLOW_DIRECTION);
    }

    @Override
    public Schema getSchema() {
        return Routing.ROUTING;
    }

    @Override
    public UniqueKey<TrafficFlowDirectionRecord> getPrimaryKey() {
        return Keys.TRAFFIC_FLOW_DIRECTION_PKEY;
    }

    @Override
    public List<UniqueKey<TrafficFlowDirectionRecord>> getKeys() {
        return Arrays.<UniqueKey<TrafficFlowDirectionRecord>>asList(Keys.TRAFFIC_FLOW_DIRECTION_PKEY);
    }

    @Override
    public TrafficFlowDirection as(String alias) {
        return new TrafficFlowDirection(DSL.name(alias), this);
    }

    @Override
    public TrafficFlowDirection as(Name alias) {
        return new TrafficFlowDirection(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrafficFlowDirection rename(String name) {
        return new TrafficFlowDirection(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrafficFlowDirection rename(Name name) {
        return new TrafficFlowDirection(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
