/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore4.mapmatching.model.tables;


import fi.hsl.jore4.mapmatching.config.jooq.converter.PointBinding;
import fi.hsl.jore4.mapmatching.model.Keys;
import fi.hsl.jore4.mapmatching.model.Routing;
import fi.hsl.jore4.mapmatching.model.tables.records.PublicTransportStopRecord;

import java.util.Arrays;
import java.util.List;

import org.geolatte.geom.C2D;
import org.geolatte.geom.Point;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The public transport stops imported from Digiroad export
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PublicTransportStop extends TableImpl<PublicTransportStopRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>routing.public_transport_stop</code>
     */
    public static final PublicTransportStop PUBLIC_TRANSPORT_STOP = new PublicTransportStop();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PublicTransportStopRecord> getRecordType() {
        return PublicTransportStopRecord.class;
    }

    /**
     * The column <code>routing.public_transport_stop.public_transport_stop_id</code>. The local ID of the public transport stop
     */
    public final TableField<PublicTransportStopRecord, Long> PUBLIC_TRANSPORT_STOP_ID = createField(DSL.name("public_transport_stop_id"), SQLDataType.BIGINT.nullable(false), this, "The local ID of the public transport stop");

    /**
     * The column <code>routing.public_transport_stop.public_transport_stop_national_id</code>. The national (persistent) ID for the public transport stop
     */
    public final TableField<PublicTransportStopRecord, Integer> PUBLIC_TRANSPORT_STOP_NATIONAL_ID = createField(DSL.name("public_transport_stop_national_id"), SQLDataType.INTEGER, this, "The national (persistent) ID for the public transport stop");

    /**
     * The column <code>routing.public_transport_stop.located_on_infrastructure_link_id</code>. The ID of the infrastructure link on which the stop is located
     */
    public final TableField<PublicTransportStopRecord, Long> LOCATED_ON_INFRASTRUCTURE_LINK_ID = createField(DSL.name("located_on_infrastructure_link_id"), SQLDataType.BIGINT.nullable(false), this, "The ID of the infrastructure link on which the stop is located");

    /**
     * The column <code>routing.public_transport_stop.infrastructure_source_id</code>. The ID of the external source system providing the stop data
     */
    public final TableField<PublicTransportStopRecord, Integer> INFRASTRUCTURE_SOURCE_ID = createField(DSL.name("infrastructure_source_id"), SQLDataType.INTEGER.nullable(false), this, "The ID of the external source system providing the stop data");

    /**
     * The column <code>routing.public_transport_stop.is_on_direction_of_link_forward_traversal</code>. Is the direction of traffic on this stop the same as the direction of the linestring describing the infrastructure link? If TRUE, the stop lies in the direction of the linestring. If FALSE, the stop lies in the reverse direction of the linestring. If NULL, the direction is undefined.
     */
    public final TableField<PublicTransportStopRecord, Boolean> IS_ON_DIRECTION_OF_LINK_FORWARD_TRAVERSAL = createField(DSL.name("is_on_direction_of_link_forward_traversal"), SQLDataType.BOOLEAN, this, "Is the direction of traffic on this stop the same as the direction of the linestring describing the infrastructure link? If TRUE, the stop lies in the direction of the linestring. If FALSE, the stop lies in the reverse direction of the linestring. If NULL, the direction is undefined.");

    /**
     * The column <code>routing.public_transport_stop.distance_from_link_start_in_meters</code>. The measure or M value of the stop from the start of the linestring (linear geometry) describing the infrastructure link. The SI unit is the meter.
     */
    public final TableField<PublicTransportStopRecord, Double> DISTANCE_FROM_LINK_START_IN_METERS = createField(DSL.name("distance_from_link_start_in_meters"), SQLDataType.DOUBLE.nullable(false), this, "The measure or M value of the stop from the start of the linestring (linear geometry) describing the infrastructure link. The SI unit is the meter.");

    /**
     * The column <code>routing.public_transport_stop.municipality_code</code>. The official code of municipality in which the stop is located
     */
    public final TableField<PublicTransportStopRecord, Integer> MUNICIPALITY_CODE = createField(DSL.name("municipality_code"), SQLDataType.INTEGER, this, "The official code of municipality in which the stop is located");

    /**
     * The column <code>routing.public_transport_stop.name</code>. JSON object containing name in different localisations
     */
    public final TableField<PublicTransportStopRecord, JSONB> NAME = createField(DSL.name("name"), SQLDataType.JSONB, this, "JSON object containing name in different localisations");

    /**
     * The column <code>routing.public_transport_stop.geom</code>. The 2D point geometry describing the location of the public transport stop. The EPSG:3067 coordinate system applied is the same as is used in Digiroad.
     */
    public final TableField<PublicTransportStopRecord, Point<C2D>> GEOM = createField(DSL.name("geom"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"extensions\".\"geometry\"").nullable(false), this, "The 2D point geometry describing the location of the public transport stop. The EPSG:3067 coordinate system applied is the same as is used in Digiroad.", new PointBinding());

    private PublicTransportStop(Name alias, Table<PublicTransportStopRecord> aliased) {
        this(alias, aliased, null);
    }

    private PublicTransportStop(Name alias, Table<PublicTransportStopRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The public transport stops imported from Digiroad export"), TableOptions.table());
    }

    /**
     * Create an aliased <code>routing.public_transport_stop</code> table reference
     */
    public PublicTransportStop(String alias) {
        this(DSL.name(alias), PUBLIC_TRANSPORT_STOP);
    }

    /**
     * Create an aliased <code>routing.public_transport_stop</code> table reference
     */
    public PublicTransportStop(Name alias) {
        this(alias, PUBLIC_TRANSPORT_STOP);
    }

    /**
     * Create a <code>routing.public_transport_stop</code> table reference
     */
    public PublicTransportStop() {
        this(DSL.name("public_transport_stop"), null);
    }

    public <O extends Record> PublicTransportStop(Table<O> child, ForeignKey<O, PublicTransportStopRecord> key) {
        super(child, key, PUBLIC_TRANSPORT_STOP);
    }

    @Override
    public Schema getSchema() {
        return Routing.ROUTING;
    }

    @Override
    public UniqueKey<PublicTransportStopRecord> getPrimaryKey() {
        return Keys.PUBLIC_TRANSPORT_STOP_PKEY;
    }

    @Override
    public List<UniqueKey<PublicTransportStopRecord>> getKeys() {
        return Arrays.<UniqueKey<PublicTransportStopRecord>>asList(Keys.PUBLIC_TRANSPORT_STOP_PKEY);
    }

    @Override
    public List<ForeignKey<PublicTransportStopRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PublicTransportStopRecord, ?>>asList(Keys.PUBLIC_TRANSPORT_STOP__PUBLIC_TRANSPORT_STOP_INFRASTRUCTURE_LINK_FKEY, Keys.PUBLIC_TRANSPORT_STOP__PUBLIC_TRANSPORT_STOP_INFRASTRUCTURE_SOURCE_FKEY);
    }

    private transient InfrastructureLink _infrastructureLink;
    private transient InfrastructureSource _infrastructureSource;

    public InfrastructureLink infrastructureLink() {
        if (_infrastructureLink == null)
            _infrastructureLink = new InfrastructureLink(this, Keys.PUBLIC_TRANSPORT_STOP__PUBLIC_TRANSPORT_STOP_INFRASTRUCTURE_LINK_FKEY);

        return _infrastructureLink;
    }

    public InfrastructureSource infrastructureSource() {
        if (_infrastructureSource == null)
            _infrastructureSource = new InfrastructureSource(this, Keys.PUBLIC_TRANSPORT_STOP__PUBLIC_TRANSPORT_STOP_INFRASTRUCTURE_SOURCE_FKEY);

        return _infrastructureSource;
    }

    @Override
    public PublicTransportStop as(String alias) {
        return new PublicTransportStop(DSL.name(alias), this);
    }

    @Override
    public PublicTransportStop as(Name alias) {
        return new PublicTransportStop(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PublicTransportStop rename(String name) {
        return new PublicTransportStop(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PublicTransportStop rename(Name name) {
        return new PublicTransportStop(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Integer, Long, Integer, Boolean, Double, Integer, JSONB, Point<C2D>> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
