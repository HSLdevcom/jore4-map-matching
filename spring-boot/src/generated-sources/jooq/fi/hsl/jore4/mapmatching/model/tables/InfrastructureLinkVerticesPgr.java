/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore4.mapmatching.model.tables;


import fi.hsl.jore4.mapmatching.config.jooq.converter.PointBinding;
import fi.hsl.jore4.mapmatching.model.Keys;
import fi.hsl.jore4.mapmatching.model.Routing;
import fi.hsl.jore4.mapmatching.model.tables.records.InfrastructureLinkVerticesPgrRecord;

import java.util.Collection;

import org.geolatte.geom.C2D;
import org.geolatte.geom.Point;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Topology nodes created for infrastructure links by pgRougting
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InfrastructureLinkVerticesPgr extends TableImpl<InfrastructureLinkVerticesPgrRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>routing.infrastructure_link_vertices_pgr</code>
     */
    public static final InfrastructureLinkVerticesPgr INFRASTRUCTURE_LINK_VERTICES_PGR = new InfrastructureLinkVerticesPgr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InfrastructureLinkVerticesPgrRecord> getRecordType() {
        return InfrastructureLinkVerticesPgrRecord.class;
    }

    /**
     * The column <code>routing.infrastructure_link_vertices_pgr.id</code>.
     */
    public final TableField<InfrastructureLinkVerticesPgrRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>routing.infrastructure_link_vertices_pgr.cnt</code>.
     */
    public final TableField<InfrastructureLinkVerticesPgrRecord, Integer> CNT = createField(DSL.name("cnt"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>routing.infrastructure_link_vertices_pgr.chk</code>.
     */
    public final TableField<InfrastructureLinkVerticesPgrRecord, Integer> CHK = createField(DSL.name("chk"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>routing.infrastructure_link_vertices_pgr.ein</code>.
     */
    public final TableField<InfrastructureLinkVerticesPgrRecord, Integer> EIN = createField(DSL.name("ein"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>routing.infrastructure_link_vertices_pgr.eout</code>.
     */
    public final TableField<InfrastructureLinkVerticesPgrRecord, Integer> EOUT = createField(DSL.name("eout"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>routing.infrastructure_link_vertices_pgr.the_geom</code>.
     */
    public final TableField<InfrastructureLinkVerticesPgrRecord, Point<C2D>> THE_GEOM = createField(DSL.name("the_geom"), SQLDataType.OTHER, this, "", new PointBinding());

    private InfrastructureLinkVerticesPgr(Name alias, Table<InfrastructureLinkVerticesPgrRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private InfrastructureLinkVerticesPgr(Name alias, Table<InfrastructureLinkVerticesPgrRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Topology nodes created for infrastructure links by pgRougting"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>routing.infrastructure_link_vertices_pgr</code>
     * table reference
     */
    public InfrastructureLinkVerticesPgr(String alias) {
        this(DSL.name(alias), INFRASTRUCTURE_LINK_VERTICES_PGR);
    }

    /**
     * Create an aliased <code>routing.infrastructure_link_vertices_pgr</code>
     * table reference
     */
    public InfrastructureLinkVerticesPgr(Name alias) {
        this(alias, INFRASTRUCTURE_LINK_VERTICES_PGR);
    }

    /**
     * Create a <code>routing.infrastructure_link_vertices_pgr</code> table
     * reference
     */
    public InfrastructureLinkVerticesPgr() {
        this(DSL.name("infrastructure_link_vertices_pgr"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Routing.ROUTING;
    }

    @Override
    public Identity<InfrastructureLinkVerticesPgrRecord, Long> getIdentity() {
        return (Identity<InfrastructureLinkVerticesPgrRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<InfrastructureLinkVerticesPgrRecord> getPrimaryKey() {
        return Keys.INFRASTRUCTURE_LINK_VERTICES_PGR_PKEY;
    }

    @Override
    public InfrastructureLinkVerticesPgr as(String alias) {
        return new InfrastructureLinkVerticesPgr(DSL.name(alias), this);
    }

    @Override
    public InfrastructureLinkVerticesPgr as(Name alias) {
        return new InfrastructureLinkVerticesPgr(alias, this);
    }

    @Override
    public InfrastructureLinkVerticesPgr as(Table<?> alias) {
        return new InfrastructureLinkVerticesPgr(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public InfrastructureLinkVerticesPgr rename(String name) {
        return new InfrastructureLinkVerticesPgr(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InfrastructureLinkVerticesPgr rename(Name name) {
        return new InfrastructureLinkVerticesPgr(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public InfrastructureLinkVerticesPgr rename(Table<?> name) {
        return new InfrastructureLinkVerticesPgr(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InfrastructureLinkVerticesPgr where(Condition condition) {
        return new InfrastructureLinkVerticesPgr(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InfrastructureLinkVerticesPgr where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InfrastructureLinkVerticesPgr where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InfrastructureLinkVerticesPgr where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InfrastructureLinkVerticesPgr where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InfrastructureLinkVerticesPgr where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InfrastructureLinkVerticesPgr where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InfrastructureLinkVerticesPgr where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InfrastructureLinkVerticesPgr whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InfrastructureLinkVerticesPgr whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
