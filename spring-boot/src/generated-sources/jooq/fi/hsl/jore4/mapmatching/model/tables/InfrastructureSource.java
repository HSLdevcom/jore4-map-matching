/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore4.mapmatching.model.tables;


import fi.hsl.jore4.mapmatching.model.Keys;
import fi.hsl.jore4.mapmatching.model.Routing;
import fi.hsl.jore4.mapmatching.model.tables.records.InfrastructureSourceRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The enumerated sources for infrastructure network entities
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InfrastructureSource extends TableImpl<InfrastructureSourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>routing.infrastructure_source</code>
     */
    public static final InfrastructureSource INFRASTRUCTURE_SOURCE = new InfrastructureSource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InfrastructureSourceRecord> getRecordType() {
        return InfrastructureSourceRecord.class;
    }

    /**
     * The column <code>routing.infrastructure_source.infrastructure_source_id</code>. The numeric enum value for the infrastructure element source. This enum code is only local to this routing schema. ATM, it is not intended to be distributed to or shared across other JORE4 services.
     */
    public final TableField<InfrastructureSourceRecord, Integer> INFRASTRUCTURE_SOURCE_ID = createField(DSL.name("infrastructure_source_id"), SQLDataType.INTEGER.nullable(false), this, "The numeric enum value for the infrastructure element source. This enum code is only local to this routing schema. ATM, it is not intended to be distributed to or shared across other JORE4 services.");

    /**
     * The column <code>routing.infrastructure_source.infrastructure_source_name</code>. The short name for the infrastructure element source
     */
    public final TableField<InfrastructureSourceRecord, String> INFRASTRUCTURE_SOURCE_NAME = createField(DSL.name("infrastructure_source_name"), SQLDataType.CLOB.nullable(false), this, "The short name for the infrastructure element source");

    /**
     * The column <code>routing.infrastructure_source.description</code>.
     */
    public final TableField<InfrastructureSourceRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    private InfrastructureSource(Name alias, Table<InfrastructureSourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private InfrastructureSource(Name alias, Table<InfrastructureSourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The enumerated sources for infrastructure network entities"), TableOptions.table());
    }

    /**
     * Create an aliased <code>routing.infrastructure_source</code> table reference
     */
    public InfrastructureSource(String alias) {
        this(DSL.name(alias), INFRASTRUCTURE_SOURCE);
    }

    /**
     * Create an aliased <code>routing.infrastructure_source</code> table reference
     */
    public InfrastructureSource(Name alias) {
        this(alias, INFRASTRUCTURE_SOURCE);
    }

    /**
     * Create a <code>routing.infrastructure_source</code> table reference
     */
    public InfrastructureSource() {
        this(DSL.name("infrastructure_source"), null);
    }

    public <O extends Record> InfrastructureSource(Table<O> child, ForeignKey<O, InfrastructureSourceRecord> key) {
        super(child, key, INFRASTRUCTURE_SOURCE);
    }

    @Override
    public Schema getSchema() {
        return Routing.ROUTING;
    }

    @Override
    public UniqueKey<InfrastructureSourceRecord> getPrimaryKey() {
        return Keys.INFRASTRUCTURE_SOURCE_PKEY;
    }

    @Override
    public List<UniqueKey<InfrastructureSourceRecord>> getKeys() {
        return Arrays.<UniqueKey<InfrastructureSourceRecord>>asList(Keys.INFRASTRUCTURE_SOURCE_PKEY);
    }

    @Override
    public InfrastructureSource as(String alias) {
        return new InfrastructureSource(DSL.name(alias), this);
    }

    @Override
    public InfrastructureSource as(Name alias) {
        return new InfrastructureSource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InfrastructureSource rename(String name) {
        return new InfrastructureSource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InfrastructureSource rename(Name name) {
        return new InfrastructureSource(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
