/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore4.mapmatching.model.tables;


import fi.hsl.jore4.mapmatching.config.jooq.converter.LineStringBinding;
import fi.hsl.jore4.mapmatching.model.Keys;
import fi.hsl.jore4.mapmatching.model.Routing;
import fi.hsl.jore4.mapmatching.model.tables.records.InfrastructureLinkRecord;

import java.util.Arrays;
import java.util.List;

import org.geolatte.geom.C2D;
import org.geolatte.geom.LineString;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The infrastructure links, e.g. road or rail elements: https://www.transmodel-cen.eu/model/index.htm?goto=2:1:1:1:453
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InfrastructureLink extends TableImpl<InfrastructureLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>routing.infrastructure_link</code>
     */
    public static final InfrastructureLink INFRASTRUCTURE_LINK = new InfrastructureLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InfrastructureLinkRecord> getRecordType() {
        return InfrastructureLinkRecord.class;
    }

    /**
     * The column <code>routing.infrastructure_link.infrastructure_link_id</code>. The local ID of the infrastructure link. The requirement of the ID being of integer type is imposed by pgRouting.
     */
    public final TableField<InfrastructureLinkRecord, Long> INFRASTRUCTURE_LINK_ID = createField(DSL.name("infrastructure_link_id"), SQLDataType.BIGINT.nullable(false), this, "The local ID of the infrastructure link. The requirement of the ID being of integer type is imposed by pgRouting.");

    /**
     * The column <code>routing.infrastructure_link.infrastructure_source_id</code>. The ID of the external source system providing the link data.
     */
    public final TableField<InfrastructureLinkRecord, Integer> INFRASTRUCTURE_SOURCE_ID = createField(DSL.name("infrastructure_source_id"), SQLDataType.INTEGER.nullable(false), this, "The ID of the external source system providing the link data.");

    /**
     * The column <code>routing.infrastructure_link.external_link_id</code>. The ID of the infrastructure link within the external source system providing the link data
     */
    public final TableField<InfrastructureLinkRecord, String> EXTERNAL_LINK_ID = createField(DSL.name("external_link_id"), SQLDataType.CLOB.nullable(false), this, "The ID of the infrastructure link within the external source system providing the link data");

    /**
     * The column <code>routing.infrastructure_link.traffic_flow_direction_type</code>. A numeric enum value for direction of traffic flow allowed on the infrastructure link
     */
    public final TableField<InfrastructureLinkRecord, Integer> TRAFFIC_FLOW_DIRECTION_TYPE = createField(DSL.name("traffic_flow_direction_type"), SQLDataType.INTEGER.nullable(false), this, "A numeric enum value for direction of traffic flow allowed on the infrastructure link");

    /**
     * The column <code>routing.infrastructure_link.municipality_code</code>. The official code of municipality in which the link is located
     */
    public final TableField<InfrastructureLinkRecord, Integer> MUNICIPALITY_CODE = createField(DSL.name("municipality_code"), SQLDataType.INTEGER, this, "The official code of municipality in which the link is located");

    /**
     * The column <code>routing.infrastructure_link.external_link_type</code>. The link type code defined within the external source system providing the link data
     */
    public final TableField<InfrastructureLinkRecord, Integer> EXTERNAL_LINK_TYPE = createField(DSL.name("external_link_type"), SQLDataType.INTEGER, this, "The link type code defined within the external source system providing the link data");

    /**
     * The column <code>routing.infrastructure_link.external_link_state</code>. The link state code defined within the external source system providing the link data
     */
    public final TableField<InfrastructureLinkRecord, Integer> EXTERNAL_LINK_STATE = createField(DSL.name("external_link_state"), SQLDataType.INTEGER, this, "The link state code defined within the external source system providing the link data");

    /**
     * The column <code>routing.infrastructure_link.name</code>. JSON object containing name of road or street in different localisations
     */
    public final TableField<InfrastructureLinkRecord, JSONB> NAME = createField(DSL.name("name"), SQLDataType.JSONB, this, "JSON object containing name of road or street in different localisations");

    /**
     * The column <code>routing.infrastructure_link.geom</code>. The 2D linestring geometry describing the shape of the infrastructure link. The requirement of two-dimensionality and metric unit is imposed by pgRouting. The EPSG:3067 coordinate system applied is the same as is used in Digiroad.
     */
    public final TableField<InfrastructureLinkRecord, LineString<C2D>> GEOM = createField(DSL.name("geom"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"extensions\".\"geometry\"").nullable(false), this, "The 2D linestring geometry describing the shape of the infrastructure link. The requirement of two-dimensionality and metric unit is imposed by pgRouting. The EPSG:3067 coordinate system applied is the same as is used in Digiroad.", new LineStringBinding());

    /**
     * The column <code>routing.infrastructure_link.start_node_id</code>. The ID of the start node for the infrastructure link based on its linestring geometry. The node points are resolved and generated by calling `pgr_createTopology` function of pgRouting.
     */
    public final TableField<InfrastructureLinkRecord, Long> START_NODE_ID = createField(DSL.name("start_node_id"), SQLDataType.BIGINT.nullable(false), this, "The ID of the start node for the infrastructure link based on its linestring geometry. The node points are resolved and generated by calling `pgr_createTopology` function of pgRouting.");

    /**
     * The column <code>routing.infrastructure_link.end_node_id</code>. The ID of the end node for the infrastructure link based on its linestring geometry. The node points are resolved and generated by calling `pgr_createTopology` function of pgRouting.
     */
    public final TableField<InfrastructureLinkRecord, Long> END_NODE_ID = createField(DSL.name("end_node_id"), SQLDataType.BIGINT.nullable(false), this, "The ID of the end node for the infrastructure link based on its linestring geometry. The node points are resolved and generated by calling `pgr_createTopology` function of pgRouting.");

    /**
     * The column <code>routing.infrastructure_link.cost</code>. The weight in terms of graph traversal for forward direction of the linestring geometry of the infrastructure link. When negative, the forward direction of the link (edge) will not be part of the graph within the shortest path calculation.
     */
    public final TableField<InfrastructureLinkRecord, Double> COST = createField(DSL.name("cost"), SQLDataType.DOUBLE.nullable(false), this, "The weight in terms of graph traversal for forward direction of the linestring geometry of the infrastructure link. When negative, the forward direction of the link (edge) will not be part of the graph within the shortest path calculation.");

    /**
     * The column <code>routing.infrastructure_link.reverse_cost</code>. The weight in terms of graph traversal for reverse direction of the linestring geometry of the infrastructure link. When negative, the reverse direction of the link (edge) will not be part of the graph within the shortest path calculation.
     */
    public final TableField<InfrastructureLinkRecord, Double> REVERSE_COST = createField(DSL.name("reverse_cost"), SQLDataType.DOUBLE.nullable(false), this, "The weight in terms of graph traversal for reverse direction of the linestring geometry of the infrastructure link. When negative, the reverse direction of the link (edge) will not be part of the graph within the shortest path calculation.");

    private InfrastructureLink(Name alias, Table<InfrastructureLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private InfrastructureLink(Name alias, Table<InfrastructureLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The infrastructure links, e.g. road or rail elements: https://www.transmodel-cen.eu/model/index.htm?goto=2:1:1:1:453"), TableOptions.table());
    }

    /**
     * Create an aliased <code>routing.infrastructure_link</code> table reference
     */
    public InfrastructureLink(String alias) {
        this(DSL.name(alias), INFRASTRUCTURE_LINK);
    }

    /**
     * Create an aliased <code>routing.infrastructure_link</code> table reference
     */
    public InfrastructureLink(Name alias) {
        this(alias, INFRASTRUCTURE_LINK);
    }

    /**
     * Create a <code>routing.infrastructure_link</code> table reference
     */
    public InfrastructureLink() {
        this(DSL.name("infrastructure_link"), null);
    }

    public <O extends Record> InfrastructureLink(Table<O> child, ForeignKey<O, InfrastructureLinkRecord> key) {
        super(child, key, INFRASTRUCTURE_LINK);
    }

    @Override
    public Schema getSchema() {
        return Routing.ROUTING;
    }

    @Override
    public UniqueKey<InfrastructureLinkRecord> getPrimaryKey() {
        return Keys.INFRASTRUCTURE_LINK_PKEY;
    }

    @Override
    public List<UniqueKey<InfrastructureLinkRecord>> getKeys() {
        return Arrays.<UniqueKey<InfrastructureLinkRecord>>asList(Keys.INFRASTRUCTURE_LINK_PKEY, Keys.UK_INFRASTRUCTURE_LINK_EXTERNAL_REF);
    }

    @Override
    public List<ForeignKey<InfrastructureLinkRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InfrastructureLinkRecord, ?>>asList(Keys.INFRASTRUCTURE_LINK__INFRASTRUCTURE_LINK_INFRASTRUCTURE_SOURCE_FKEY, Keys.INFRASTRUCTURE_LINK__INFRASTRUCTURE_LINK_TRAFFIC_FLOW_DIRECTION_FKEY);
    }

    private transient InfrastructureSource _infrastructureSource;
    private transient TrafficFlowDirection _trafficFlowDirection;

    public InfrastructureSource infrastructureSource() {
        if (_infrastructureSource == null)
            _infrastructureSource = new InfrastructureSource(this, Keys.INFRASTRUCTURE_LINK__INFRASTRUCTURE_LINK_INFRASTRUCTURE_SOURCE_FKEY);

        return _infrastructureSource;
    }

    public TrafficFlowDirection trafficFlowDirection() {
        if (_trafficFlowDirection == null)
            _trafficFlowDirection = new TrafficFlowDirection(this, Keys.INFRASTRUCTURE_LINK__INFRASTRUCTURE_LINK_TRAFFIC_FLOW_DIRECTION_FKEY);

        return _trafficFlowDirection;
    }

    @Override
    public InfrastructureLink as(String alias) {
        return new InfrastructureLink(DSL.name(alias), this);
    }

    @Override
    public InfrastructureLink as(Name alias) {
        return new InfrastructureLink(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InfrastructureLink rename(String name) {
        return new InfrastructureLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InfrastructureLink rename(Name name) {
        return new InfrastructureLink(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Integer, String, Integer, Integer, Integer, Integer, JSONB, LineString<C2D>, Long, Long, Double, Double> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
