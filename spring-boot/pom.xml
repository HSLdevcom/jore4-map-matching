<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>fi.hsl.jore4</groupId>
    <artifactId>map-matching-backend</artifactId>
    <packaging>jar</packaging>
    <version>1.1.0</version>
    <name>Jore4 Map Matching</name>
    <description>Jore4 map matching server</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <java.version>11</java.version>
        <kotlin.compiler.jvmTarget>${java.version}</kotlin.compiler.jvmTarget>
        <kotlin.compiler.incremental>true</kotlin.compiler.incremental>

        <!-- Maven build plugins and their dependencies -->
        <build-helper-plugin.version>3.2.0</build-helper-plugin.version>
        <build-properties-plugin.version>1.0.0</build-properties-plugin.version>
        <flyway-plugin.version>8.0.5</flyway-plugin.version>
        <jooq-meta.version>3.14.15</jooq-meta.version>
        <kotlin-plugin.version>1.6.21</kotlin-plugin.version>
        <postgresql.version>42.3.5</postgresql.version>
        <surefire-plugin.version>2.22.2</surefire-plugin.version>

        <!-- Library versions -->
        <arrow-core.version>1.0.0</arrow-core.version>
        <geolatte.version>1.8.2</geolatte.version>
        <kotlin-logging-jvm.version>2.1.23</kotlin-logging-jvm.version>
        <quicktheories.version>0.26</quicktheories.version>
        <spring-boot.version>2.6.8</spring-boot.version>

        <!-- Other properties -->
        <start.class>fi.hsl.jore4.mapmatching.MapMatchingApplicationKt</start.class>
    </properties>

    <profiles>
        <profile>
            <id>prod</id>
            <properties>
                <build.profile.id>prod</build.profile.id>
                <build.property.file>profiles/${build.profile.id}/config.properties</build.property.file>
            </properties>
            <build>
                <filters>
                    <filter>${build.property.file}</filter>
                </filters>
            </build>
        </profile>

        <profile>
            <id>dev</id>
            <properties>
                <build.profile.id>dev</build.profile.id>
                <build.property.file>profiles/${build.profile.id}/config.properties</build.property.file>
                <build.property.user-override.file>profiles/${build.profile.id}/config.${user.name}.properties</build.property.user-override.file>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <filters>
                    <filter>${build.property.file}</filter>
                    <filter>${build.property.user-override.file}</filter>
                </filters>
                <plugins>
                    <!-- Read properties files for build plugins.
                         ATM, Flyway and jOOQ plugins need access to database properties. -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                        <version>${build-properties-plugin.version}</version>

                        <configuration>
                            <files>
                                <file>${build.property.file}</file>
                                <file>${build.property.user-override.file}</file>
                            </files>
                        </configuration>

                        <executions>
                            <execution>
                                <id>read-config-properties</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>read-project-properties</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.flywaydb</groupId>
                        <artifactId>flyway-maven-plugin</artifactId>
                        <version>${flyway-plugin.version}</version>

                        <configuration>
                            <driver>${db.driver}</driver>
                            <url>${db.url}</url>
                            <user>${db.username}</user>
                            <password>${db.password}</password>

                            <!-- Below is common configuration for the development and test databases. -->

                            <locations>
                                <location>filesystem:${project.basedir}/src/main/resources/db/migration</location>
                            </locations>
                            <schemas>
                                <schema>routing</schema>
                                <schema>extensions</schema>
                                <schema>flyway</schema>
                            </schemas>
                            <defaultSchema>flyway</defaultSchema>
                            <createSchemas>true</createSchemas>
                            <initSql>SET search_path = extensions, routing;</initSql>
                        </configuration>

                        <executions>
                            <!-- Run migrations during build phase. Migrations are run into the test database to enable
                                 jOOQ metaclass generation. -->
                            <execution>
                                <id>flyway-migrate</id>
                                <phase>process-resources</phase>

                                <!-- Configure test database to be used during build. -->
                                <configuration>
                                    <driver>${test.db.driver}</driver>
                                    <url>${test.db.url}</url>
                                    <user>${test.db.username}</user>
                                    <password>${test.db.password}</password>
                                </configuration>

                                <goals>
                                    <goal>clean</goal>
                                    <goal>migrate</goal>
                                </goals>
                            </execution>
                        </executions>

                        <dependencies>
                            <dependency>
                                <groupId>org.postgresql</groupId>
                                <artifactId>postgresql</artifactId>
                                <version>${postgresql.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>

                    <!-- jOOQ generator scans the empty DB to detect the tables created by
                         the Flyway migration. -->
                    <plugin>
                        <groupId>org.jooq</groupId>
                        <artifactId>jooq-codegen-maven</artifactId>
                        <version>${jooq-meta.version}</version>

                        <executions>
                            <execution>
                                <id>generate-sources-jooq</id>
                                <!-- jOOQ code generation is executed in process-resources phase just after
                                     Flyway migrations. -->
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                            </execution>
                        </executions>

                        <dependencies>
                            <dependency>
                                <groupId>org.postgresql</groupId>
                                <artifactId>postgresql</artifactId>
                                <version>${postgresql.version}</version>
                            </dependency>
                            <dependency>
                                <groupId>org.jooq</groupId>
                                <artifactId>jooq-codegen</artifactId>
                                <version>${jooq-meta.version}</version>
                            </dependency>
                            <dependency>
                                <groupId>org.jooq</groupId>
                                <artifactId>jooq-meta</artifactId>
                                <version>${jooq-meta.version}</version>
                            </dependency>
                        </dependencies>

                        <configuration>
                            <jdbc>
                                <driver>${test.db.driver}</driver>
                                <url>${test.db.url}</url>
                                <user>${test.db.username}</user>
                                <password>${test.db.password}</password>
                            </jdbc>
                            <generator>
                                <name>org.jooq.codegen.JavaGenerator</name>
                                <database>
                                    <name>org.jooq.meta.postgres.PostgresDatabase</name>
                                    <inputSchema>${jooq.generator.input.schema}</inputSchema>
                                    <includeTables>true</includeTables>
                                    <includeInvisibleColumns>false</includeInvisibleColumns>
                                    <includeEmbeddables>false</includeEmbeddables>
                                    <includeRoutines>false</includeRoutines>
                                    <includePackages>false</includePackages>
                                    <includePackageRoutines>false</includePackageRoutines>
                                    <includePackageUDTs>false</includePackageUDTs>
                                    <includePackageConstants>false</includePackageConstants>
                                    <includeUDTs>false</includeUDTs>
                                    <includeDomains>false</includeDomains>
                                    <includeSequences>true</includeSequences>
                                    <includePrimaryKeys>true</includePrimaryKeys>
                                    <includeUniqueKeys>true</includeUniqueKeys>
                                    <includeForeignKeys>true</includeForeignKeys>
                                    <includeCheckConstraints>false</includeCheckConstraints>
                                    <includeSystemCheckConstraints>false</includeSystemCheckConstraints>
                                    <includeIndexes>false</includeIndexes>
                                    <includeSystemIndexes>false</includeSystemIndexes>
                                    <includes>
                                        routing\..*
                                    </includes>
                                    <forcedTypes>
                                        <forcedType>
                                            <userType>fi.hsl.jore4.mapmatching.model.TrafficFlowDirectionType</userType>
                                            <converter>fi.hsl.jore4.mapmatching.config.jooq.converter.TrafficFlowDirectionTypeConverter</converter>
                                            <includeExpression>.*\.infrastructure_link\.traffic_flow_direction_type</includeExpression>
                                        </forcedType>
                                        <forcedType>
                                            <userType>org.geolatte.geom.LineString&lt;org.geolatte.geom.C2D&gt;</userType>
                                            <converter>fi.hsl.jore4.mapmatching.config.jooq.converter.LineStringBinding</converter>
                                            <includeExpression>.*\.infrastructure_link\.geom</includeExpression>
                                        </forcedType>
                                        <forcedType>
                                            <userType>org.geolatte.geom.Point&lt;org.geolatte.geom.C2D&gt;</userType>
                                            <converter>fi.hsl.jore4.mapmatching.config.jooq.converter.PointBinding</converter>
                                            <includeExpression>.*\.public_transport_stop\.geom | .*\.infrastructure_link_vertices_pgr\.the_geom</includeExpression>
                                        </forcedType>
                                    </forcedTypes>
                                </database>
                                <target>
                                    <packageName>fi.hsl.jore4.mapmatching.model</packageName>
                                    <directory>${project.basedir}/src/generated-sources/jooq</directory>
                                </target>
                            </generator>
                        </configuration>
                    </plugin>
                </plugins>
            </build>

            <dependencies>
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-devtools</artifactId>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
        </profile>
    </profiles>

    <build>
        <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
        <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>

        <resources>
            <!-- Resolve @some.key@ placeholders. -->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.properties</include>
                </includes>
            </resource>
            <!-- Only copy other (non-filtered) resources. -->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <excludes>
                    <exclude>**/*.properties</exclude>
                </excludes>
            </resource>
        </resources>
        <testResources>
            <!-- Resolve @some.key@ placeholders. -->
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.properties</include>
                </includes>
            </testResource>
            <!-- Only copy other (non-filtered) resources. -->
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>false</filtering>
                <excludes>
                    <exclude>**/*.properties</exclude>
                </excludes>
            </testResource>
        </testResources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>enforce-versions</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <message>You are running an older version of Maven. Maven >= 3.3.9 is required</message>
                                    <version>[3.3.9,)</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <message>You are running an incompatible version of Java. JDK 11 is required</message>
                                    <version>${java.version}</version>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>${build-helper-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/generated-sources/jooq</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin-plugin.version}</version>
                <configuration>
                    <compilerPlugins>
                        <plugin>spring</plugin>
                    </compilerPlugins>
                    <args>
                        <!-- Enable strict mode for JSR-305 annotations. -->
                        <arg>-Xjsr305=strict</arg>
                    </args>
                </configuration>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-noarg</artifactId>
                        <version>${kotlin-plugin.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-allopen</artifactId>
                        <version>${kotlin-plugin.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!-- Set Java compiling to occur after Kotlin compilation. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
                <executions>
                    <!-- Replacing default-compile as it is treated specially by Maven. -->
                    <execution>
                        <id>default-compile</id>
                        <phase>none</phase>
                    </execution>
                    <!-- Replacing default-testCompile as it is treated specially by Maven. -->
                    <execution>
                        <id>default-testCompile</id>
                        <phase>none</phase>
                    </execution>
                    <execution>
                        <id>java-compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>java-test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${surefire-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <configuration>
                    <fork>true</fork>
                    <mainClass>${start.class}</mainClass>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jooq</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-reflect</artifactId>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-kotlin</artifactId>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>

        <dependency>
            <groupId>io.github.microutils</groupId>
            <artifactId>kotlin-logging-jvm</artifactId>
            <version>${kotlin-logging-jvm.version}</version>
        </dependency>

        <!-- Geolatte for handling geometry types in Java -->
        <dependency>
            <groupId>org.geolatte</groupId>
            <artifactId>geolatte-geom</artifactId>
            <version>${geolatte.version}</version>
        </dependency>
        <dependency>
            <groupId>org.geolatte</groupId>
            <artifactId>geolatte-geojson</artifactId>
            <version>${geolatte.version}</version>
        </dependency>

        <dependency>
            <groupId>io.arrow-kt</groupId>
            <artifactId>arrow-core</artifactId>
            <version>${arrow-core.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-test-junit5</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.quicktheories</groupId>
            <artifactId>quicktheories</artifactId>
            <version>${quicktheories.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
