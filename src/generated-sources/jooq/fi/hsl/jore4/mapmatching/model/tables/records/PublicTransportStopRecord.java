/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore4.mapmatching.model.tables.records;


import fi.hsl.jore4.mapmatching.model.tables.PublicTransportStop;

import org.geolatte.geom.C2D;
import org.geolatte.geom.Point;
import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * The public transport stops imported from Digiroad export
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PublicTransportStopRecord extends UpdatableRecordImpl<PublicTransportStopRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>routing.public_transport_stop.public_transport_stop_id</code>. The
     * local ID of the public transport stop
     */
    public void setPublicTransportStopId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>routing.public_transport_stop.public_transport_stop_id</code>. The
     * local ID of the public transport stop
     */
    public Long getPublicTransportStopId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>routing.public_transport_stop.public_transport_stop_national_id</code>.
     * The national (persistent) ID for the public transport stop
     */
    public void setPublicTransportStopNationalId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>routing.public_transport_stop.public_transport_stop_national_id</code>.
     * The national (persistent) ID for the public transport stop
     */
    public Integer getPublicTransportStopNationalId() {
        return (Integer) get(1);
    }

    /**
     * Setter for
     * <code>routing.public_transport_stop.located_on_infrastructure_link_id</code>.
     * The ID of the infrastructure link on which the stop is located
     */
    public void setLocatedOnInfrastructureLinkId(Long value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>routing.public_transport_stop.located_on_infrastructure_link_id</code>.
     * The ID of the infrastructure link on which the stop is located
     */
    public Long getLocatedOnInfrastructureLinkId() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>routing.public_transport_stop.infrastructure_source_id</code>. The
     * ID of the external source system providing the stop data
     */
    public void setInfrastructureSourceId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>routing.public_transport_stop.infrastructure_source_id</code>. The
     * ID of the external source system providing the stop data
     */
    public Integer getInfrastructureSourceId() {
        return (Integer) get(3);
    }

    /**
     * Setter for
     * <code>routing.public_transport_stop.is_on_direction_of_link_forward_traversal</code>.
     * Is the direction of traffic on this stop the same as the direction of the
     * linestring describing the infrastructure link? If TRUE, the stop lies in
     * the direction of the linestring. If FALSE, the stop lies in the reverse
     * direction of the linestring. If NULL, the direction is undefined.
     */
    public void setIsOnDirectionOfLinkForwardTraversal(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>routing.public_transport_stop.is_on_direction_of_link_forward_traversal</code>.
     * Is the direction of traffic on this stop the same as the direction of the
     * linestring describing the infrastructure link? If TRUE, the stop lies in
     * the direction of the linestring. If FALSE, the stop lies in the reverse
     * direction of the linestring. If NULL, the direction is undefined.
     */
    public Boolean getIsOnDirectionOfLinkForwardTraversal() {
        return (Boolean) get(4);
    }

    /**
     * Setter for
     * <code>routing.public_transport_stop.distance_from_link_start_in_meters</code>.
     * The measure or M value of the stop from the start of the linestring
     * (linear geometry) describing the infrastructure link. The SI unit is the
     * meter.
     */
    public void setDistanceFromLinkStartInMeters(Double value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>routing.public_transport_stop.distance_from_link_start_in_meters</code>.
     * The measure or M value of the stop from the start of the linestring
     * (linear geometry) describing the infrastructure link. The SI unit is the
     * meter.
     */
    public Double getDistanceFromLinkStartInMeters() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>routing.public_transport_stop.municipality_code</code>.
     * The official code of municipality in which the stop is located
     */
    public void setMunicipalityCode(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>routing.public_transport_stop.municipality_code</code>.
     * The official code of municipality in which the stop is located
     */
    public Integer getMunicipalityCode() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>routing.public_transport_stop.name</code>. JSON object
     * containing name in different localisations
     */
    public void setName(JSONB value) {
        set(7, value);
    }

    /**
     * Getter for <code>routing.public_transport_stop.name</code>. JSON object
     * containing name in different localisations
     */
    public JSONB getName() {
        return (JSONB) get(7);
    }

    /**
     * Setter for <code>routing.public_transport_stop.geom</code>. The 2D point
     * geometry describing the location of the public transport stop. The
     * EPSG:3067 coordinate system applied is the same as is used in Digiroad.
     */
    public void setGeom(Point<C2D> value) {
        set(8, value);
    }

    /**
     * Getter for <code>routing.public_transport_stop.geom</code>. The 2D point
     * geometry describing the location of the public transport stop. The
     * EPSG:3067 coordinate system applied is the same as is used in Digiroad.
     */
    public Point<C2D> getGeom() {
        return (Point<C2D>) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PublicTransportStopRecord
     */
    public PublicTransportStopRecord() {
        super(PublicTransportStop.PUBLIC_TRANSPORT_STOP);
    }

    /**
     * Create a detached, initialised PublicTransportStopRecord
     */
    public PublicTransportStopRecord(Long publicTransportStopId, Integer publicTransportStopNationalId, Long locatedOnInfrastructureLinkId, Integer infrastructureSourceId, Boolean isOnDirectionOfLinkForwardTraversal, Double distanceFromLinkStartInMeters, Integer municipalityCode, JSONB name, Point<C2D> geom) {
        super(PublicTransportStop.PUBLIC_TRANSPORT_STOP);

        setPublicTransportStopId(publicTransportStopId);
        setPublicTransportStopNationalId(publicTransportStopNationalId);
        setLocatedOnInfrastructureLinkId(locatedOnInfrastructureLinkId);
        setInfrastructureSourceId(infrastructureSourceId);
        setIsOnDirectionOfLinkForwardTraversal(isOnDirectionOfLinkForwardTraversal);
        setDistanceFromLinkStartInMeters(distanceFromLinkStartInMeters);
        setMunicipalityCode(municipalityCode);
        setName(name);
        setGeom(geom);
        resetChangedOnNotNull();
    }
}
