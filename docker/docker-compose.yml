---
version: "3.8"
services:
  jore4-mapmatching:
    build:
      context: ".."
    container_name: mapmatching
    restart: "unless-stopped"
    networks:
      - jore4
    ports:
      - "127.0.0.1:3005:8080"
    environment:
      - DB_DATABASE=${POSTGRES_DB}
      - DB_HOSTNAME=jore4-mapmatchingdb
      - DB_USERNAME=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}

  # pre-populated with infrastructure network data and pgRouting topology
  jore4-mapmatchingdb:
    image: hsldevcom/jore4-postgres:mapmatching-main--20221021-5d79cff3c07193f524a9ef64a68000079e7f2f24
    container_name: mapmatchingdb
    restart: "unless-stopped"
    networks:
      - jore4
    ports:
      - "127.0.0.1:19000:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DIGIROAD_ROUTING_DUMP_VERSION=2022-06-09

  # empty database used in development (instead of "jore4-mapmatchingdb")
  jore4-mapmatchingdevdb:
    build:
      context: "./docker-pgrouting"
    container_name: mapmatchingdevdb
    restart: "unless-stopped"
    networks:
      - jore4
    ports:
      - "127.0.0.1:18000:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  # empty database for tests and jOOQ code generation
  jore4-mapmatchingtestdb:
    build:
      context: "./docker-pgrouting"
    container_name: mapmatchingtestdb
    restart: "unless-stopped"
    networks:
      - jore4
    ports:
      - "127.0.0.1:20000:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

networks:
  jore4:
